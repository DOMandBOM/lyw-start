<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript扩展1</title>
      <link href="/leng-yangwei/star.git/2023/07084.html"/>
      <url>/leng-yangwei/star.git/2023/07084.html</url>
      
        <content type="html"><![CDATA[<p>JavaScript扩展1–这篇主要是交换两个变量的值的几种方法的总结</p><span id="more"></span><h2 id="交换两个变量的值的几种方法"><a href="#交换两个变量的值的几种方法" class="headerlink" title="交换两个变量的值的几种方法"></a>交换两个变量的值的几种方法</h2><h3 id="方法1-设置一个中间变量"><a href="#方法1-设置一个中间变量" class="headerlink" title="方法1  设置一个中间变量"></a>方法1  设置一个中间变量</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> temp <span class="token operator">=</span> cup1cup1 <span class="token operator">=</span> cup2cup2 <span class="token operator">=</span> tempconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法2-数组的解构赋值"><a href="#方法2-数组的解构赋值" class="headerlink" title="方法2   数组的解构赋值"></a>方法2   数组的解构赋值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法3-放在一个数组，通过索引交换"><a href="#方法3-放在一个数组，通过索引交换" class="headerlink" title="方法3  放在一个数组，通过索引交换"></a>方法3  放在一个数组，通过索引交换</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span>cup2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cup1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>cup1 <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup2<span class="token operator">=</span>cup1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/leng-yangwei/star.git/2023/07083.html"/>
      <url>/leng-yangwei/star.git/2023/07083.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>JavaScript基础这篇笔记是关于JavaScript基础语法的总结</p><span id="more"></span><h2 id="1-js基础语法"><a href="#1-js基础语法" class="headerlink" title="1.js基础语法"></a>1.js基础语法</h2><h3 id="1-1js介绍"><a href="#1-1js介绍" class="headerlink" title="1.1js介绍"></a>1.1js介绍</h3><p>是什么？：是一种运行在客户端的编程语言，实现人机交互<br>作用：网页特效，表单验证，数据交互，服务端编程<br>组成：<code>ECMAScript</code>，<code>Web APIS</code></p><h3 id="1-2-js的书写位置"><a href="#1-2-js的书写位置" class="headerlink" title="1.2 js的书写位置"></a>1.2 js的书写位置</h3><p>1.内联  写在标签里面<br>2.内部  直接写在html文件  放入底部<br>3.外部  写在js文件中  <code>&lt;script src=&quot;&quot;&gt;</code><br>注意：引入的<code>script</code>标签中间就不要写代码了</p><h3 id="1-3js的注释"><a href="#1-3js的注释" class="headerlink" title="1.3js的注释"></a>1.3js的注释</h3><p>1.单行注释  <code>//</code>   快捷键<code>Ctrl+/</code><br>2.多行注释 <code>/* */</code></p><h3 id="1-4js的结束符"><a href="#1-4js的结束符" class="headerlink" title="1.4js的结束符"></a>1.4js的结束符</h3><p>1.代表语句结束   英文分号<br>2.换行符会自动标识为结束符</p><h3 id="1-5js输入输出语法"><a href="#1-5js输入输出语法" class="headerlink" title="1.5js输入输出语法"></a>1.5js输入输出语法</h3><p>1.向<code>body</code>输出内容 <code>document.write(&#39;输出内容&#39;)</code><br>2.页面弹出警示框  <code>alert（‘输出内容’）</code><br>3.控制台输出语法  <code>console.log(&#39;输出内容&#39;)</code><br>4.<code>prompt()</code>输入语法</p><h3 id="1-6变量"><a href="#1-6变量" class="headerlink" title="1.6变量"></a>1.6变量</h3><p>1.<strong>是什么？</strong>存储数据的容器，注意：<strong>变量不是数据本身，而是存储数据的容器</strong><br>2.声明变量  :  <code>let 变量名;</code>  赋值： <code>变量名 = 18;</code><br>变量初始化<code> let age =18;</code><br><strong>let不允许多次声明一个变量</strong><br>3.<strong>变量的本质</strong>  是内存中的一块空间，用来存储数据<br>4.<strong>变量名规则与规范</strong></p><pre><code>规则：1.不能出现关键字            2.只能用下划线，字母，数字，$符号组成，且不能数字开头            3.字母严格区分大小写规范：1.见名知意            2.遵循小驼峰命名法</code></pre><p>5.<strong>变量扩展-数组</strong></p><pre><code>1.保存多个数据2.let 变量名 = [数据1,数据2,数据3]3.数组中的每个数据都有自己的编号，第一个编号是从0开始</code></pre><h3 id="1-7数据类型"><a href="#1-7数据类型" class="headerlink" title="1.7数据类型"></a>1.7数据类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><p><strong>number</strong> 数字型<br><strong>string</strong>  字符串型</p><pre><code>1.引号必须成对  推荐使用单引号2.外单内双，外双内单3.转义符  \4.字符串拼接  console.log(变量名1+变量名2)5.模板字符串 `我叫$&#123;name&#125;`</code></pre><p><strong>boolean</strong>  布尔型  true  false<br><strong>undefined</strong> 未定义<br><strong>null</strong>  空引用</p><h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h4><p>对象，函数，数组</p><p><strong>检测数据类型</strong><br><code>typeof</code>    例如：<code>console.log(typeof 123)</code></p><h3 id="1-8类型的转换"><a href="#1-8类型的转换" class="headerlink" title="1.8类型的转换"></a>1.8类型的转换</h3><p><strong>隐式转换</strong></p><pre><code>+号两边只要有一个是字符串，那么就会把另一个转换为字符串除了+以外的算数运算符,-*/等都会把数据转换为数字类型+号作为正号解析时，可以转换为数字类型</code></pre><p><strong>显式转换</strong></p><pre><code>1.转换为数字型       Number(&#39;10&#39;)       parseInt(&#39;10&#39;)   转换为数字型，只保留整数，没有四舍五入       parseFloat(&#39;10.99&#39;) 转换为数字型，会保留小数区别1.1Number()：只能放数字类型的字符，否则返回NaN1.2pasreFloat(): 能放以数字开头的所有类型的字符串，pasreFloat 会自动过滤，只返回数字2.转换为字符型       1.String(数据)       2.变量.toString(进制)</code></pre><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><h3 id="2-1运算符"><a href="#2-1运算符" class="headerlink" title="2.1运算符"></a>2.1运算符</h3><p><strong>算数运算符</strong>  +  -  *  &#x2F;  %<br>优先级 ：*&#x2F; %同等级，先乘除后加减，有括号先算括号<br><strong>赋值运算符</strong></p><pre><code>= 赋值+=    num += 1  等同于 num = num + 1-=  *=  /=  %=</code></pre><p><strong>一元运算符</strong></p><pre><code>++ 自增++num  前置自增  先自加，再使用  等同于num += 1num++  后置自增  先使用，再自加  等同于num += 1--  自减</code></pre><p><strong>比较运算符</strong><br>     &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;<br><strong>相等运算符</strong></p><pre><code>==  左右两边值是否相等，不管数据类型=== 左右两边数据类型 ，值， 引用地址全等  常用！== 值不等于得到的结果true  flase注意：       1.NaN不等于任何值，包括它本身       2.尽量不要比较小数       3.不同类型之间比较会发生隐式转换       4.开发中请用===</code></pre><p><strong>逻辑运算符</strong></p><pre><code>&amp;&amp;  并且  一假则假|| 或者  一真则真！ 取反 真变假 假变真逻辑运算符里的短路  只存在于&amp;&amp;和||&amp;&amp;左边为假flase就不判断右边了||左边为真true就不判断右边了注意：有5个值是当false来看的      false为假      数字0为假      ‘’ 空字符串为假      undefined为假      null 为假      NaN为假</code></pre><p><strong>运算符优先级</strong><br><strong>小括号&gt; 一元运算符和取反！&gt; 算数运算符&gt;比较运算符&gt;相等运算符&gt;&amp;&amp;&gt;||&gt;赋值运算符&#x3D;&gt;逗号</strong></p><h3 id="2-2语句"><a href="#2-2语句" class="headerlink" title="2.2语句"></a>2.2语句</h3><p>   顺序语句 从上到下依次执行</p><h3 id="2-3分支语句"><a href="#2-3分支语句" class="headerlink" title="2.3分支语句"></a>2.3分支语句</h3><p><strong>2.3.1if分支语句</strong><br>       <code>if()&#123;&#125; else if()&#123;&#125; else&#123;&#125;</code><br> <strong>三元表达式</strong><br>       条件？输出1：输出2<br><strong>switch语句</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> 数据<span class="token number">1</span><span class="token punctuation">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'取款'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">case</span> 数据<span class="token number">2</span><span class="token punctuation">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'存款'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'重新输入'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>2.3.2循环语句</strong><br><strong>while循环</strong> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">//变量起始值</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//变量终止条件</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hh`</span></span><span class="token punctuation">)</span>        i<span class="token operator">++</span>   <span class="token comment" spellcheck="true">//变量变化</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>for循环</strong><br>       1.<code>for(let i = 1; i &lt;= 10; i++) &#123;循环体&#125;</code><br>       2.<code>for循环的嵌套</code><br><strong>continue和break的区别</strong><br>      1.<code>continue</code> 结束本次循环，继续下一次循环<br>       2.<code>break</code> 直接退出本次循环</p><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p>语法：<code>let 数组名 = []</code><br>数组长度   <code>数组名.length</code><br><strong>添加数组</strong></p><pre><code>arr.push(元素1，元素2)   在数组后面添加  返回新数组arr.unshit(元素1，元素2)  在数组前面添加  返回新数组</code></pre><p><strong>删除数组</strong></p><pre><code>arr.pop()  只能删除最后一个元素  返回新数组arr.shift()  只能删除第一个元素  返回新数组arr.splice(从哪里删,删除几个)  删除指定元素</code></pre><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1函数的基础使用"><a href="#4-1函数的基础使用" class="headerlink" title="4.1函数的基础使用"></a>4.1函数的基础使用</h3><p><strong>是什么？</strong>执行特定任务的代码块，可以实现代码复用<br><code>function  函数名() &#123; 函数体 &#125;</code>     调用函数：<code>函数名()</code></p><h3 id="4-2函数传参"><a href="#4-2函数传参" class="headerlink" title="4.2函数传参"></a>4.2函数传参</h3><p>作用：提高函数的灵活性<br><code>function  函数名(形参1,形参2) &#123; 函数体 &#125;</code>     调用函数:<code>函数名(实参1,实参2)</code></p><h3 id="4-3函数的返回值"><a href="#4-3函数的返回值" class="headerlink" title="4.3函数的返回值"></a>4.3函数的返回值</h3><p><strong>return</strong></p><pre><code>1.函数内部可以有多个return，但返回值只能有一个，return后面的数据不要换行写2.return会立即结束当前函数3.函数可以没有return，但返回值会是undefined4.return只能返回一个值     例如  return a,b 那么此时，不会返回b     解决:写成数组  return[a,b]</code></pre><h3 id="4-4作用域"><a href="#4-4作用域" class="headerlink" title="4.4作用域"></a>4.4作用域</h3><p><strong>全局作用域</strong><br>整个script标签内部或者一个独立的文件，全局作用域下的变量谁都能使用<br><strong>局部作用域</strong><br>函数内的代码环境，因为跟环境有关，也被称为函数作用域，局部作用域只能在局部使用<br><strong>块级作用域</strong><br><code>块级作用域由&#123; &#125;包括，if语句，for语句等</code>，块级作用域只能在块级之中用</p><pre><code>注意1：如果函数内部或者块级作用域内部，没有用let声明的变量，却直接使用，也要把它当作全局变量注意2：函数内部的形参可以看做是局部变量总结一句话：全局&gt;局部=块级</code></pre><h3 id="4-5作用域链"><a href="#4-5作用域链" class="headerlink" title="4.5作用域链"></a>4.5作用域链</h3><p>是什么？根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称为作用域链<br><strong>查找变量的原则</strong>：就近原则<br><strong>匿名函数(函数表达式)</strong><br>语法:<code>let fn  =  function (x,y) &#123;函数体&#125;</code>    调用:<code>fn(x,y)</code><br><strong>立即执行函数</strong>     立即执行，无需调用<br><strong>作用</strong>：能有效避免全局变量之间的污染<br>两种写法：<br><code>(function (x,y) &#123;函数体&#125;)(x,y);</code><br><code>(function (x,y) &#123;函数体&#125;(x,y));</code><br><strong>注意：必须加分号；结束符</strong></p><p><strong>arguments</strong></p><pre><code>1.伪数组，无法使用数组中的方法2.有length3.仅仅只在函数内有效</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//示例：</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><strong>在写了实参却没有写形参时，可以使用argument伪数组</strong></p><h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h2><h3 id="5-1什么是对象"><a href="#5-1什么是对象" class="headerlink" title="5.1什么是对象"></a>5.1什么是对象</h3><pre><code>1.无序的数据集合2.是一种数据类型3.是由属性和方法组成</code></pre><h3 id="5-2对象的基本使用"><a href="#5-2对象的基本使用" class="headerlink" title="5.2对象的基本使用"></a>5.2对象的基本使用</h3><p><code>let 对象名 = &#123;属性名:属性值,方法名:匿名函数&#125;</code><br><strong>对象两种访问属性的方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span><span class="token string">'小米10'</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span><span class="token number">1000128164</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span><span class="token string">'0.55kg'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span><span class="token string">'中国大陆'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> <strong>访问方法：</strong></p><pre><code>1.对象名.属性名2.对象名[&#39;属性名&#39;]3.对象访问方法    对象.方法名()</code></pre><h3 id="5-3操作对象"><a href="#5-3操作对象" class="headerlink" title="5.3操作对象"></a>5.3操作对象</h3><p><strong>查</strong></p><pre><code>对象名.属性名对象名[&#39;属性名&#39;]</code></pre><p><strong>增</strong></p><pre><code>对象名.新属性名= 新属性值</code></pre><p><strong>改</strong></p><pre><code>对象.属性名 = 值对象.方法 = 匿名函数</code></pre><p><strong>删</strong></p><pre><code>delete 对象名.属性</code></pre><h3 id="5-4遍历对象"><a href="#5-4遍历对象" class="headerlink" title="5.4遍历对象"></a>5.4遍历对象</h3><pre><code>1.对象没有数组的length属性，无法确定长度2.对象里面是无序的键值对，没有规律，不想数组有下标</code></pre><p><strong>语法</strong>：<code>for(let k(变量名) in  对象名) &#123;&#125;</code><br><strong>k是变量名</strong><br>       因此，获得对象属性的是k<br>       获得对象值是obj[k]<br><strong>遍历数组对象</strong></p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`    &lt;table>    &lt;caption>&lt;h2>学生信息&lt;/h2>&lt;/caption>    &lt;tr>        &lt;th>序号&lt;/th>        &lt;th>姓名&lt;/th>        &lt;th>年龄&lt;/th>        &lt;th>性别&lt;/th>        &lt;th>家乡&lt;/th>    &lt;/tr>    `</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'河北'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'河北'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'河北'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'河北'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'河北'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`            &lt;tr>                &lt;td>$&amp;#123;i + 1&amp;#125;&lt;/td>                &lt;td>$&amp;#123;arr[i].name&amp;#125;&lt;/td>                &lt;td>$&amp;#123;arr[i].age&amp;#125;&lt;/td>                &lt;td>$&amp;#123;arr[i].sex&amp;#125;&lt;/td>                &lt;td>$&amp;#123;arr[i].address&amp;#125;&lt;/td>            &lt;/tr>            `</span></span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>`<span class="token punctuation">)</span></code></pre><h3 id="5-5内置对象"><a href="#5-5内置对象" class="headerlink" title="5.5内置对象"></a>5.5内置对象</h3><p><strong>数学对象Math</strong><br>math.pi  圆周率</p><p>math.abs  绝对值  如果是字符串的’-1’,输出也会是1，隐式转换</p><p>math.max 取最大值<br>如果未输入数字进去，返回-Infinity，<br>如果输入数字进去，则是取最大值<br>如果输入数字和字符串混合的，则是NAN</p><p>math.min  取最小值<br>math.ceil  向上取整<br>math.floor 向下取整</p><p>math.round 四舍五入  0.5  是往大的方向四舍五入</p><p>math.random（） 随机数<br>返回一个0-1之间随机的小数，包括0，不包括1<br>这个方法里面不跟参数</p><p>1-10之间的随机数<br>return Math.floor(Math.random() * (max-min+1)+min);</p><h3 id="5-6数据类型的存储方式"><a href="#5-6数据类型的存储方式" class="headerlink" title="5.6数据类型的存储方式"></a>5.6数据类型的存储方式</h3><p>简单数据类型按照值存储   存放在栈<br>复杂数据类型按照地址存储  存放在堆</p><p>复杂数据类型的地址</p><p>简单数据类型的值</p><p>总结：简单数据类型开辟的地址是不同的，无论几个简单数据去开辟同样的值，那他的地址照样不会改</p><p>总结：复杂数据类型的值是存放在堆里面的，而找到堆的值要通过栈的复杂数据类型的地址，复杂数据1只要赋值于复杂数据2，那么就获得了与复杂数据1同样的地址，同时能够读取到堆里面的值，而复杂数据2如果一改变，则会通过栈里面的地址找到堆里面的数据，同时会改变对里面数字的值，而此时复杂数据1的值也会因此改变</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-web端</title>
      <link href="/leng-yangwei/star.git/2023/07082.html"/>
      <url>/leng-yangwei/star.git/2023/07082.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-web端"><a href="#CSS-web端" class="headerlink" title="CSS-web端"></a>CSS-web端</h1><p>CSS-web端这篇笔记是关于web端能够使用到的css样式语法</p><span id="more"></span><h2 id="一-CSS基础认知"><a href="#一-CSS基础认知" class="headerlink" title="一.CSS基础认知"></a>一.CSS基础认知</h2><p><strong>是什么？</strong>：层叠样式表<br><strong>作用</strong>：专门给html设置样式<br><strong>语法规则</strong>：<br>1.选择器  {color:red;}<br>2.css符号都是英文<br>3.键值对写完以后需要加分号<br><strong>css引入方式</strong>：<br>内嵌式：将css代码写在html文件中<br>                <code>一般写在title标签下面，&lt;style&gt;&lt;/style&gt;</code></p><p>外联式：写在单独的css文件中<br>                通过link标签在html文件中引入</p><p>行内式：<code>写在目标标签的开始标签中，style=&#39;color:red;&#39;</code></p><h2 id="二-选择器"><a href="#二-选择器" class="headerlink" title="二.选择器"></a>二.选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1.标签选择器"></a>1.标签选择器</h4><p><strong>标签名 {css属性}</strong><br>特点：<strong>找到页面中所有的这个标签</strong></p><h4 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h4><p><strong>.类名 {css属性}</strong>           class的属性值成为类名<br>特点：<br>        1.仅仅只找该类名的标签<br>        2.不能以数字，中划线开头<br>        3.类名可以有数字，字母，下划线，中划线<br>        4.标签中可以有多个类名</p><h4 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h4><p><strong>#id属性值 {css属性}</strong><br>特点：<strong>一个id选择器只能选择到一个标签</strong></p><h4 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h4><p><code>* &#123;css属性&#125;</code><br>特点：<strong>找到页面上所有标签，设置样式</strong></p><h3 id="选择器的进阶"><a href="#选择器的进阶" class="headerlink" title="选择器的进阶"></a>选择器的进阶</h3><p><strong>复合选择器</strong><br><code>1.后代选择器</code>：选择器1 选择器2 { css属性 }<br><strong>作用</strong>：寻找所有的后代，包括孙子<br><code>2.子代选择器</code>：选择器1&gt;选择器2{css属性}<br><strong>作用</strong>：仅仅只寻找子代，不会找到孙子<br><code>3.并集选择器</code>：选择器1，选择器2 {css属性}  中间逗号分隔<br><strong>作用</strong>：选中选择器1和选择器2选中的标签，设置样式<br><code>4.交集选择器</code>：选择器1选择器2 {css选择器}<br><strong>作用</strong>：找到页面一个标签内同时拥有选择器1和选择器2的标签，<br><code>&lt;p class=&#39;red&#39;&gt;小哥哥&lt;/p&gt;</code>       p.red {css属性}<br><strong>注意</strong>：交集选择器中如果有标签选择器，标签选择器必须写在最前面<br><code>5. hover伪类选择器</code>：选择器:hover{css属性}<br>在鼠标悬停在元素上时触发<br><code>6.emmet语法</code> ：内部文本    ul&gt;li{我是li的内容}，能够快速生成结构，需要的自己查一下文档。</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>1.<code>父盒子 子盒子:first-child &#123;&#125;</code><br>2.<code>父盒子 子盒子:last-child &#123;&#125;</code><br>3.<code>父盒子 子盒子:nth-child(n) &#123;&#125;</code></p><pre><code>偶数  2n  even奇数 2n-1 odd前5个  -n+5后五个 n+5</code></pre><p>4.<code>父盒子 子盒子:nth-last-child(n) &#123;&#125;</code><br>5.<code>父盒子 子盒子:nth-of-type(n) &#123;&#125;</code><br><strong>区别：</strong><br>:nth-child → 直接在所有孩子中数个数<br>:nth-of-type → 先通过该 类型 找到符合的一堆子元素，然后在这一堆子元素中数个数</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素：通过css模拟出来的html标签<br>::before   ::after<br><strong>注意：</strong><br>1.必须设置content属性才能生效<br>2.伪元素默认是行内元素<br>3.只有双标签才可以使用伪元素</p><h2 id="三-字体和文本样式"><a href="#三-字体和文本样式" class="headerlink" title="三.字体和文本样式"></a>三.字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><pre><code>font-size        字体大小font-weight      文本粗细    400为正常font-family      文本字体font-style       文本风格    normal  正常    italic  斜体font连写方式    font:文本风格   文本粗细   字体大小/行高   字体注意：1.必须保留font-size和font-family属性，否则font属性不起作用     2.要把单独的样式写在连写的下面，不然会被覆盖</code></pre><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><pre><code>color  文字颜色text-align  文本水平居中 只能给大盒子使用text-decoration 下划线样式               1.none  默认，用于a标签的取消下划线            2.underline  下划线text-indent属性  首行缩进      单位emline-height  行高</code></pre><h2 id="四-背景属性"><a href="#四-背景属性" class="headerlink" title="四.背景属性"></a>四.背景属性</h2><pre><code>背景颜色  background-color背景图片  background-img:url()            盒子比图片大，会出现平铺的效果背景平铺  background-repeat            1.no-repeat  不平铺            2.repeat-x  水平方向平铺            3.repeat-y  垂直方向平铺背景位置   background-position:水平方向  垂直方向            向右走为正值            向下走为正值背景属性的复合写法：background:color url() no-repeat position</code></pre><h2 id="五-元素的显示模式"><a href="#五-元素的显示模式" class="headerlink" title="五.元素的显示模式"></a>五.元素的显示模式</h2><h3 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="1.块级元素"></a>1.块级元素</h3><p><strong>特点：</strong><br>1.独占一行<br>2.如果不设置宽高，那么他的宽度由父元素决定，高度由内容撑开<br>3.可以设置宽高<br><strong>如何转换？</strong>转换块级元素   display:block;<br><strong>哪些是块级元素：</strong>div,p h系列，列表， 表格，form…</p><h3 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h3><p><strong>特点：</strong><br>1.不独占一行,可放多个<br>2.不能设置宽高<br>3.宽高由内容决定<br><strong>如何转换？</strong>转换为行内块元素  display:inline;<br><strong>哪些是行内元素</strong>：a,span,b,i,u…..</p><h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><p><strong>特点：</strong><br>1.一行显示多个<br>2.可以设置宽高<br><strong>如何转换？</strong>转换为行内块元素  display：inline-block<br><strong>哪些是行内块元素</strong>img，input等所有表单元素</p><h2 id="六-CSS特性"><a href="#六-CSS特性" class="headerlink" title="六.CSS特性"></a>六.CSS特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>1.字体系列，文本系列控制的属性都能继承<br>2.width，height不能被继承<br>3.a标签无法继承color<br>4.h系列标签无法继承font-size</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>1.给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</p><p>2.给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效<br>    注意：当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>1.当同一个元素指定多个选择器，就会有优先级<br>2.！important&gt;行类样式&gt;id选择器&gt;类选择器，伪类选择器&gt;基础选择器&gt;通配符&gt;继承<br>3.!important放在声明后面，声明会变成最大优先级<br>4.选择器 {属性名:属性值 !important;}</p><h2 id="七-盒子模型"><a href="#七-盒子模型" class="headerlink" title="七.盒子模型"></a>七.盒子模型</h2><p><strong>组成：内容+内边距+边框+外边距</strong><br><strong>内边距 padding</strong><br>            1.padding一般都会撑大盒子<br>            2.不会撑大的情况<br>                1.不给子元素设置宽，默认是父盒子的宽<br>                2.给子元素设置padding和border都不会撑大盒子<br><strong>边框 border</strong><br><strong>外边距 margin</strong><br><strong>自动内减 box-sizing: border-box;</strong> 怪异盒子</p><h4 id="1-外边距折叠现象"><a href="#1-外边距折叠现象" class="headerlink" title="1.外边距折叠现象"></a>1.外边距折叠现象</h4><p><strong>① 合并现象</strong><br>1.场景：垂直布局 的 块级元素，上下的margin会合并<br>2.结果：最终两者距离为margin的最大值<br>3.解决方法：只给其中一个盒子设置margin即可<br><strong>② 塌陷现象</strong><br>1.场景：互相嵌套 的 块级元素，子元素的 margin-top 会作用在父元素上<br>2.结果：导致父元素一起往下移动<br>3.解决办法：<br>3.1：给父元素设置border-top 或者 padding-top（分隔父子元素的margin-top）<br>3.2：给父元素设置overflow：hidden<br>3.3：给父元素转换成行内块元素<br>3.4：给父元素设置浮动</p><h4 id="2-行内元素的margin和padding无效情况"><a href="#2-行内元素的margin和padding无效情况" class="headerlink" title="2.行内元素的margin和padding无效情况"></a>2.行内元素的margin和padding无效情况</h4><p>1.场景：给行内元素设置margin和padding时<br>2.结果：<br>2.1：水平方向的margin和padding布局中有效！<br>2.2：垂直方向的margin和padding布局中无效！</p><h2 id="八-标准流"><a href="#八-标准流" class="headerlink" title="八.标准流"></a>八.标准流</h2><p>1.块级元素：从上往下，垂直布局，独占一行</p><p>2.行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行</p><h2 id="九浮动"><a href="#九浮动" class="headerlink" title="九浮动"></a>九浮动</h2><p><strong>浮动的作用：</strong>1.图文环绕 ，2.网页布局<br><strong>语法：</strong>float:left&#x2F;right;<br><strong>特点：</strong><br>1.浮动元素会脱标，在标准流中不占位置<br>2.浮动元素比标准流高出半个级别，可以覆盖标准流中的元素<br>3.浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动<br>4.浮动元素有特殊的显示效果：① 一行可以显示多个 ② 可以设置宽高</p><p><strong>注意:浮动的元素不能通过text-align:center或者margin:0 auto</strong></p><h3 id="如何清除浮动？"><a href="#如何清除浮动？" class="headerlink" title="如何清除浮动？"></a>如何清除浮动？</h3><p><strong>1.单伪元素清除浮动</strong></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><strong>2.双伪元素清除法</strong></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>before,<span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>     <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><strong>3.给父盒子设置一个高</strong><br><strong>4.给父元素设置overflow:hidden;</strong><br><strong>5.额外标签法</strong><br>5.1：在父元素内容的最后添加一个块级元素<br>5.2：给添加的块级元素设置 clear:both</p><h2 id="十-定位"><a href="#十-定位" class="headerlink" title="十.定位"></a>十.定位</h2><p>定位场景：1.盒子层叠，2.固定盒子位置</p><h3 id="第一步：设置position"><a href="#第一步：设置position" class="headerlink" title="第一步：设置position"></a>第一步：设置position</h3><p><strong>relative  相对定位</strong>：相对于自己之前的位置移动<br>特点：1.占位置，未脱标。2.配合边偏移使用。3.子绝父相</p><p><strong>absolute  绝对定位</strong>：默认浏览器可视区进行移动<br>如果其祖先元素有定位的属性，就相对于最近的祖先定位元素来移动，祖先定位可以是（绝对，相对，固定）<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.子绝父相<br><strong>水平垂直居中</strong>：</p><pre class=" language-css"><code class="language-css"><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span> <span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>fixed 固定定位</strong>：相对于浏览器可视区进行移动<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.让盒子固定在屏幕中的某个位置</p><p><strong>z-index</strong>：z-index：1；数值越大，越在上面。要结合定位使用，不能单独使用</p><h3 id="第二步：设置边偏移"><a href="#第二步：设置边偏移" class="headerlink" title="第二步：设置边偏移"></a>第二步：设置边偏移</h3><p>left  right  top  bottom</p><h2 id="十一-装饰"><a href="#十一-装饰" class="headerlink" title="十一.装饰"></a>十一.装饰</h2><h3 id="1-垂直对齐方式"><a href="#1-垂直对齐方式" class="headerlink" title="1.垂直对齐方式"></a>1.垂直对齐方式</h3><p><strong>语法：vertical-align:top&#x2F;middle&#x2F;bottom</strong><br><strong>只能设置给行内&#x2F;行内块元素，设置给图片</strong><br><strong>注意：</strong><br>1.行内&#x2F;行内块的元素都有基线对齐的问题<br>2.不推荐使用行内块让div一行显示，因为可能出现基线对齐的问题<br><strong>解决：</strong>方法1:使用vertical-align<br>           方法2：将行内&#x2F;行内块元素转换为块级元素</p><h3 id="2-cursor-鼠标光标"><a href="#2-cursor-鼠标光标" class="headerlink" title="2.cursor  鼠标光标"></a>2.cursor  鼠标光标</h3><p>这个自己查文档去</p><h3 id="3-圆角边框"><a href="#3-圆角边框" class="headerlink" title="3.圆角边框"></a>3.圆角边框</h3><p>1.border-radius:10px;  数值越大，就越圆<br>2.圆形   50%<br>3.胶囊按钮  设置盒子高度的一半</p><h3 id="4-overflow"><a href="#4-overflow" class="headerlink" title="4.overflow"></a>4.overflow</h3><p>处理溢出的部分</p><pre><code>hidden  隐藏visible  默认值  溢出的部分显示scroll  将溢出的部分设置为滚动条，不管内容是否溢出，都会出现auto  根据内容多少来决定，如果内容溢出才触发滚动条</code></pre><h3 id="5-显示与隐藏"><a href="#5-显示与隐藏" class="headerlink" title="5.显示与隐藏"></a>5.显示与隐藏</h3><p><strong>display属性</strong></p><pre><code>block 显示none   隐藏注意：隐藏以后不占位置</code></pre><p><strong>visibility属性</strong></p><pre><code>hidden  隐藏visible 显示占位置</code></pre><p><strong>opacity元素透明度</strong></p><pre><code>opacity：0.5；属性值在0-1之间注意：opacity会让元素整体透明，包括里面的内容</code></pre><p><strong>transparent  透明度</strong></p><h2 id="十二-链接伪类"><a href="#十二-链接伪类" class="headerlink" title="十二.链接伪类"></a>十二.链接伪类</h2><pre><code>a:link a链接未访问过的状态a:visited  a链接访问以后的状态a:active  选中鼠标按下a:hover</code></pre><h2 id="十三-焦点伪类"><a href="#十三-焦点伪类" class="headerlink" title="十三.焦点伪类"></a>十三.焦点伪类</h2><p>input:focus</p><h2 id="十四-精灵图"><a href="#十四-精灵图" class="headerlink" title="十四.精灵图"></a>十四.精灵图</h2><p>1.设置背景图片<br>2.设置背景位置值，负值</p><h2 id="十五-过渡"><a href="#十五-过渡" class="headerlink" title="十五.过渡"></a>十五.过渡</h2><p>语法：transition:all  2s;<br><strong>注意：</strong><br>1.过渡需要：默认状态 和 hover状态样式不同，才能有过渡效果<br>2.transition属性给需要过渡的元素本身加<br>3.transition属性设置在不同状态中，效果不同的<br>① 给默认状态设置，鼠标移入移出都有过渡效果<br>② 给hover状态设置，鼠标移入有过渡效果，移出没有过渡效果</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/leng-yangwei/star.git/2023/07071.html"/>
      <url>/leng-yangwei/star.git/2023/07071.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML这篇笔记是关于html的一些语法，它包含了对html的认知与使用</p><span id="more"></span> <h2 id="一-html基础认知"><a href="#一-html基础认知" class="headerlink" title="一.html基础认知"></a>一.html基础认知</h2><p><strong>1.什么是html</strong>：他是超文本标记语言<br><strong>2.web标准三大组成部分？</strong>：结构html,表现css,行为js<br><strong>3.html注释</strong>：<code>&lt;!--  --&gt;</code>或者快捷键：Ctrl+&#x2F;<br><strong>4.注释的作用</strong>：用于解释说明标签的描述信息</p><h2 id="二-html标签"><a href="#二-html标签" class="headerlink" title="二.html标签"></a>二.html标签</h2><p>标签构成：<strong>双标签</strong>和<strong>单标签</strong></p><p>标签与标签的关系：<br>1.父子(嵌套):<code>&lt;head&gt;</code>与<code>&lt;title&gt;</code>的关系<br>2.兄弟(并列):<code>&lt;head&gt;</code>与<code>&lt;body&gt;</code>的关系</p><h3 id="html标签学习"><a href="#html标签学习" class="headerlink" title="html标签学习"></a>html标签学习</h3><h4 id="1-1-排版标签"><a href="#1-1-排版标签" class="headerlink" title="1.1 排版标签"></a>1.1 排版标签</h4><p><strong>标题标签</strong>：<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code><br>特点：1.文字加粗变大，h1文字最大，依次递减,，2.独占一行<br><strong>段落标签</strong>：<code>&lt;p&gt;&lt;/p&gt;</code><br>特点：1.独占一行，2.文字多时浏览器会自动换行</p><p><strong>换行标签</strong>：<code>&lt;br&gt;</code><br>特点：1.单标签，2.让文字强制换行<br><strong>水平线标签</strong>：<code>&lt;hr&gt;</code><br>特点：1.单标签，2.在页面中显示一条水平线</p><h4 id="1-2-文本格式化标签"><a href="#1-2-文本格式化标签" class="headerlink" title="1.2 文本格式化标签"></a>1.2 文本格式化标签</h4><p><strong>标签名</strong>：</p><p>1.<code>&lt;b&gt;</code>和<code>&lt;strong&gt;</code>             加粗<br>2.<code>&lt;u&gt;</code>和<code>&lt;ins&gt;</code>                   下划线<br>3.<code>&lt;i&gt;</code>和<code>&lt;em&gt;</code>                      倾斜<br>4.<code>&lt;s&gt;</code>和<code>&lt;del&gt;</code>                    删除线</p><p><strong>特点</strong>：标签内容会在一行显示</p><h4 id="1-3标签的属性"><a href="#1-3标签的属性" class="headerlink" title="1.3标签的属性"></a>1.3标签的属性</h4><p>&lt;开始标签  属性名&#x3D;’属性值’&gt;&lt;&#x2F;结束标签&gt;<br><strong>注意点</strong>：</p><p>1.标签的属性写在开始标签的内部<br>2.允许存在多个属性<br>3.属性之间空格隔开<br>4.标签名与属性之间必须用空格隔开<br>5.属性之间没有顺序之分</p><h4 id="1-4媒体标签"><a href="#1-4媒体标签" class="headerlink" title="1.4媒体标签"></a>1.4媒体标签</h4><p><strong>img图片标签</strong>：<code>&lt;img&gt;</code></p><p>1.src用于显示图片，值是图片路径<br>2.alt替换文本，图片加载失败时才会显示对应的文字信息<br>3.title鼠标悬停在图片上面时显示的文字信息</p><h4 id="1-5路径"><a href="#1-5路径" class="headerlink" title="1.5路径"></a>1.5路径</h4><p>1.绝对路径(不常用)：指目录下的绝对位置，可直接达到目标位置，通常以盘符开始的路径</p><pre><code>例如1:D:/14天基础/day01例如2:完整的网络地址</code></pre><p>2.相对路径：从当前文件开始出发找目标文件的过程</p><pre><code>同级目录:  ./上级目录:  ../下级目录:  /</code></pre><h4 id="1-6音频与视频"><a href="#1-6音频与视频" class="headerlink" title="1.6音频与视频"></a>1.6音频与视频</h4><p><strong>音频标签</strong>：<code>&lt; audio&gt;</code><br>常见属性：</p><pre><code>src        路径controls   显示播放的控件autoplay   自动播放loop       循环播放muted      静音播放</code></pre><p> <strong>视频标签</strong>：<code>&lt; video&gt;</code><br>常见属性：</p><pre><code>src        路径controls   显示播放的控件autoplay   自动播放  配合muted静音播放loop       循环播放muted      静音播放poster=” “ 加载等待的画面图片</code></pre><p><strong>a标签</strong>：<code>&lt;a href=&#39;&#39;&gt;内容&lt;a&gt;</code><br>常见属性：</p><pre><code>href   跳转路径target 设置目标链接的打开方式,两种值：_self,_blank_self  默认值_blank 新窗口打开 不会覆盖原网页</code></pre><p><strong>空链接</strong> ：<code>&lt;a href=&#39;#&#39;&gt;内容&lt;a&gt;</code></p><h4 id="1-7列表标签"><a href="#1-7列表标签" class="headerlink" title="1.7列表标签"></a>1.7列表标签</h4><p><strong>无序列表</strong>：<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code>         <strong>并列关系,无顺序之分</strong><br><strong>有序列表</strong>：<code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code>          <strong>有顺序之分，主要用于排名</strong><br><strong>自定义列表</strong>： 一般用于网页底部，  简单理解就是一个大哥带着几个小弟，dl是自定义列表的框架，dt是大哥，dd是小弟<br><code>&lt;dl&gt;     &lt;dt&gt;我是大哥&lt;/dt&gt;     &lt;dd&gt;我是小弟1号&lt;/dd&gt;     &lt;dd&gt;我是小弟2号&lt;/dd&gt;  &lt;/dl&gt;</code></p><h4 id="1-8表格标签"><a href="#1-8表格标签" class="headerlink" title="1.8表格标签"></a>1.8表格标签</h4><p><strong>表格结构标签</strong>：table表格整体，tr行，td单元格<br><code>&lt;table&gt;</code><br>        <code>&lt;tr&gt;</code><br>            <code>&lt;td&gt;序号&lt;/td&gt;</code><br>            <code>&lt;td&gt;姓名&lt;/td&gt;</code><br>        <code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code></p><p><strong>表格属性</strong></p><pre><code>boder 边框        width   heightalign left right center 表格对齐方式（写入table标签中）cellpadding  表格中文字与边框的距离cellspacing  表格中边框与边框之间的间距  </code></pre><p><strong>表格标题和表头单元格标签</strong><br> 1.caption 表格标题，写在table里面<br> 2.th 表头单元格，里面文字会居中且加粗<br><strong>表格结构标签(了解)</strong></p><pre><code>thead  表格头部区域标签tbody  表格主体区域标签tfoot 表格底部</code></pre><p><strong>合并单元格</strong><br> 注意：<strong>合并属性是写在单元格td，th上，不能跨结构标签合并：thead  tbody  tfooter</strong><br> <strong>colspan</strong>   跨列合并     以左侧单元格作为目标单元格<br> <strong>rowspan</strong>  跨行合并     以上侧单元格作为目标单元格<br> 最后删除多余的单元格</p><h4 id="1-9表单标签"><a href="#1-9表单标签" class="headerlink" title="1.9表单标签"></a>1.9表单标签</h4><p><strong>input系列</strong></p><pre><code>1.text文本框       placeholder占位符，提示输入文本2.password密码框   placeholder占位符，提示输入文本3.radio单选框        name   相同的name属性值的单选框为一组        checked   默认选中4.checkbox多选框        checked   默认选中5.file文件选择框        multiple  默认只能选择一个文件，选择多个则需要multiple6.按钮        submit提交按钮        reset重置按钮        button普通按钮        注意：如果需要实现以上按钮，需要配合form标签使用        value属性可以设置文字</code></pre><p><strong>button按钮标签</strong></p><p>submit提交按钮： <code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</code></p><p>reset重置按钮：<code> &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;</code></p><p>button普通按钮</p><p>注意：如果需要实现以上按钮，需要配合form标签使用</p><p><strong>select下拉框</strong></p><p>标签组成：select标签和option标签<br>默认显示：selected，在option里面添加</p><p><strong>textarea标签</strong><br>属性：cols 宽度  ，rows 行的数量<br>textarea文本域</p><p><strong>label标签</strong></p><p>作用：<strong>光标聚焦</strong><br>表单聚焦：<code>&lt;label for=&quot;fullname&quot;&gt;姓名：&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;fullname&quot;&gt;</code></p><p>单选聚焦：<code>&lt;label&gt;男：&lt;input type=&quot;radio&quot;&gt;&lt;/label&gt;</code></p><p><strong>语义化标签</strong><br>1.没有语义的标签</p><pre><code>div独占一行span不独占一行</code></pre><p>2.语义化标签(了解)</p><pre><code>header 网页头部footer 网页底部section 区块nav 导航栏aside 网页侧边栏article 网页文章</code></pre><p>  <strong>字符实体</strong><br>   <code>&amp;nbsp;</code>  空格<br>   <code>&amp;gt;</code> 大于<br>   <code> &amp;lt;</code> 小于</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
